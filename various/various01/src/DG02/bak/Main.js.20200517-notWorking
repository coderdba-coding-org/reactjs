// Design:
// Drop-down to choose a network 
// Drop-down to choose whether one wants network or chart for the nodes
// Then click a button
// Button click will bring a network or charts for all nodes - depending upon network/chart choice
// Also, it will populate the network into a state variable
// Further option: Drop down to choose one or more 'hot' nodes - derived from the state variable that saves the network
// Then click another button
// This button click will bring the charts for only the hot nodes

import React, { useState } from 'react';
import { DGApp } from './DGApp'
import axios from 'axios'
import LineChartClass from './LineChart-Class'
import LineChartMultiRenderClass from './LineChart-MultiRender-Class'

//We are using LineChart-Class.js now instead of these two
//import  Chart  from './Chart'
//import  ChartFunc  from './ChartFunc'

export default function Main(){

    // state to store the network json with baseline and actual values as well
    const [app, setApp] = useState('ChooseAnApp');
    const [action, setAction] = useState('networkDiagram');

    //chartsForNodesRender NOT NEEDED remove it - and - REMOVE THE AXIOS3... FUNCTIONS ALSO 
    const [chartsForNodesRender, setChartsForNodesRender] = useState('');
    //NOT NEEDED - const [networkNodes, setNetworkNodes] = useState();
    
    // setting this may try a re-render - need to check
    //const [networkSVG, setNetworkSVG] = useState();

    // functions to handle form/button events
    const handleChangeApp = event => {
        setApp(event.target.value);
    }

    // functions to handle form/button events
    const handleChangeAction = event => {
        setAction(event.target.value);
    }
 
    const handleSubmit = event => {
        if (app == 'ChooseAnApp') {
            alert('Choose a different app. Cannot choose ' + app);
        }
        else {
            alert('You have chosen: ' + app);
        }

        event.preventDefault()
    }

    const handleClick = event => {
        if (app == 'ChooseAnApp') {
            alert('Choose a different app (re-checking). Cannot choose ' + app);
        }
        else {
            alert('You have chosen (re-checking): ' + app);
        }
        event.preventDefault()
    }

    // for section that displays messages based on chosen parameters
    const MessageForChosenValues = () => {

      //if (app != "ChooseAnApp" && action == 'networkDiagram') {
      if (app == "ChooseAnApp") {
        return ("Choose a different app")
      } 
    }

    const MessageForChosenValuesOld = () => {

      if (app != "ChooseAnApp" && action == 'networkDiagram') {
        return ("Network diagram for: " + app + " (may take a few moments)")
      } else {
        return ("Cannot generate network-diagram for this app: " + app + ". Choose a different app")
      }
    }

    // function for displaying network diagram
    const DisplayNetworkDiagram = () => {
            
        console.log("DisplayNetworkDiagram(): App is: " + app)
        console.log("DisplayNetworkDiagram(): Action is: " + action)

        if (app == "ChooseAnApp") {
          return ("Choose a different app")
        } else { if ( action == 'networkDiagram') {
                return(DGApp(app))
             }
             else {
              return ("Choose a different app-action combination")
             }  
        }

        /*
        if ((app == "MyApp" && action == 'networkDiagram') || (app == "MyApp2" && action == 'networkDiagram')) {

            return(DGApp(app))
        } else {
            //return ("Cannot generate network diagram for this app: " + app)
            return ("Choose the correct combination of app and action")
        }
        */
    }

  // displays charts for all nodes for the app
  const DisplayCharts = () => {

    console.log("DisplayCharts(): Entering")
    return(<LineChartMultiRenderClass appName={app} />)
  }

  // https://www.pluralsight.com/guides/iterate-through-a-json-response-in-jsx-render-for-reactjs
  // https://stackoverflow.com/questions/55561320/how-to-fix-the-map-is-not-a-function-error-in-javascript
  // https://stackoverflow.com/questions/3199588/fastest-way-to-convert-javascript-nodelist-to-array
  
  // REMOVE THIS
  const DisplayChartsForTheNodesAxios3aFetchURL = async() =>  {
      const url = 'http://localhost:8081/nodes/' + app
      try {
        const res = await axios.get(url);
        const resData = res.data
        const resDataNodes = res.data.nodes
        console.log("DisplayChartsForTheNodesAxios3aFetchURL(): resData is: ")
        console.log(resData) //work well up to here
        //return "work in progress"
        return resData;
      }
      catch (err) {
        console.log(err)
      }
  }

  // REMOVE THIS
  // function for displaying line chart (NOT TO USE NOW)
  const DisplayLineChart = () => {
            
        console.log("DisplayLineChart(): App is: " + app)
        console.log("DisplayLineChart(): Action is: " + action)
  
        if ((app == "MyApp" && action == 'networkDiagram') || (app == "MyApp2" && action == 'networkDiagram')) {
  
            // dont enclose the <div> part below in quotes or double-quotes
            return(<div> <LineChartClass nodeName={app}/> </div>)  
        } else {
            //return ("Cannot generate network diagram for this app: " + app)
            return ("Choose the correct combination of app and action")
        }
  }

  // REMOVE THIS
  const DisplayChartsForTheNodesAxios3a = () => {

    if (app != "MyApp2") {
      return "Choose MyApp2 and networkDiagram"
    }

    const chartsForNodes = DisplayChartsForTheNodesAxios3aFetchURL()
    .then(resData => {
      console.log("DisplayChartsForTheNodesAxios3a(): resData is: ")
      console.log(resData) // prints ok without saying Promise
      console.log("DisplayChartsForTheNodesAxios3a(): resData datatype is: ")
      console.log(typeof(resData))
      console.log("DisplayChartsForTheNodesAxios3a(): resData nodes is: ")
      console.log(resData.nodes)

      //const nodeListArray = Object.entries(resData.nodes) // this will be object of a list of arrays
      const nodeListArray = resData.nodes  // BEST: this will be object of list of objects
      //const nodeListArray = JSON.parse(resData) // this errors
      //const nodeListArray = Array.prototype.slice.call(resData) // this puts null
      console.log("DisplayChartsForTheNodesAxios3a(): nodeListArray is: ")
      console.log(nodeListArray)
      console.log("DisplayChartsForTheNodesAxios3a(): nodeListArray datatype is: ")
      console.log(typeof(nodeListArray))
      console.log("DisplayChartsForTheNodesAxios3a(): nodeListArray Length is: ")
      console.log(nodeListArray.length)

      console.log("DisplayChartsForTheNodesAxios3a(): nodeListArray processing")

      // Use these sites info
      // Get only the values and generate a segment to render
      // https://www.pluralsight.com/guides/iterate-through-a-json-response-in-jsx-render-for-reactjs
      // https://www.pluralsight.com/guides/load-and-render-json-data-into-react-components

      nodeListArray.map((item) => { 
        // https://www.samanthaming.com/tidbits/76-converting-object-to-array/
        console.log(item) // this prints ok when nodeListArrau = resData.nodes
        console.log(Object.keys(item)) // this prints ok when nodeListArrau = resData.nodes
        console.log(Object.keys(item)[0]) // this prints ok when nodeListArrau = resData.nodes
        console.log(Object.values(item)) // this prints ok when nodeListArrau = resData.nodes
        console.log(Object.values(item)[0]) // this prints ok when nodeListArrau = resData.nodes
      });

      // <div> <LineChartClass nodeName={Object.values(item)[0]}/> </div>

      //return (
      setChartsForNodesRender(
        <div>
          {nodeListArray.map((item) => (
            <div><LineChartClass nodeName={Object.values(item)[0]}/></div>
          ))}
        </div>
      )    
      //return "work in progress"
      //setChartsForNodesRender("work in progress x")

    }); // this the end of 'then'

    //return "work in progress"
    //return chartsForNodes

    /* here, we will have these from Promise:
    Promise__proto__: 
      Promise
        [[PromiseState]]: "fulfilled"
        [[PromiseResult]]: "work in progress"

    We need to take out PromiseResult and return it
    */

    /*
    const gotval = chartsForNodes
    console.log("DisplayChartsForTheNodesAxios3a(): gotval: ")
    console.log(gotval)

    
    gotval.then(res => {
      console.log("DisplayChartsForTheNodesAxios3a(): gotval promise-result: ")
      console.log(res) // this prints fine
    })

    return gotval
    */

    const gotval = chartsForNodes
    return chartsForNodesRender

  }

    // TBD:
    // Remove submit
    // Introduce a message on 'wait, fetching'
    // DONE:
    // Introduce a message on what can be fetched (done)
    return (
        <section>
          <div>
            <h1>Application Health Visualizer</h1>
            <form>
              <label>
              Pick the App:
                <select value={app} onChange={handleChangeApp}>
                  <option value="ChooseAnApp">Choose an App</option>
                  <option value="MyApp">MyApp</option>
                  <option value="MyApp2">MyApp2</option>
                </select>
              </label>
              <br></br>
              <br></br>
              <label>
              Pick the Action:
                <select value={action} onChange={handleChangeAction}>
                  <option value="networkDiagram">Network Diagram</option>
                  <option value="graphs">Graphs</option>
                </select>
              </label>
            </form>
          </div>
          <div>
              <br></br>
               <MessageForChosenValues />
          </div>
          <div>
               <h2>Network Diagram</h2>
               <DisplayNetworkDiagram />
          </div>
          <div>
              <br></br>
               <DisplayCharts />
          </div>
        </section>

      )

/*
    return (
        <section>
          <div>
            <h1>Application Health Visualizer</h1>
            <form>
              <label>
              Pick the App:
                <select value={app} onChange={handleChangeApp}>
                  <option value="ChooseAnApp">Choose an App</option>
                  <option value="MyApp">MyApp</option>
                  <option value="MyApp2">MyApp2</option>
                </select>
              </label>
              <br></br>
              <br></br>
              <label>
              Pick the Action:
                <select value={action} onChange={handleChangeAction}>
                  <option value="networkDiagram">Network Diagram</option>
                  <option value="graphs">Graphs</option>
                </select>
              </label>
            </form>
          </div>
          <div>
              <br></br>
               <MessageForChosenValues />
          </div>
          <div>
               <h2>Network Diagram</h2>
               <DisplayNetworkDiagram />
          </div>
          <div>
               <h2>Line Chart Class for the App</h2>
               <LineChartClass nodeName={app}/>
          </div>
          <div>
               <h2>Line Chart Class for the App</h2>
               <DisplayLineChart />
          </div>
          <div>
              <DisplayChartsForTheNodes />
          </div>
          <div>
              <h2>Charts for the Nodes</h2>
              <DisplayChartsForTheNodesAxios3a />
          </div>
        </section>

      )
*/

}